import type { ProjectConfig } from "../types";

export const packageJsonTemplate = (config: ProjectConfig) => ({
  name: config.projectName,
  version: "0.1.0",
  private: true,
  scripts: {
    dev: "next dev",
    build: "next build",
    start: "next start",
    lint: "next lint",
    ...(config.addHusky && {
      prepare: "husky install",
    }),
  },
  dependencies: {
    next: "^15.0.0",
    react: "^18.0.0",
    "react-dom": "^18.0.0",
    mongoose: "^8.0.0",
    tailwindcss: "^3.4.0",
    autoprefixer: "^10.4.0",
    postcss: "^8.4.0",
    "@tailwindcss/typography": "^0.5.0",
    clsx: "^2.0.0",
    "tailwind-merge": "^2.0.0",
    ...(config.addAuth && {
      "next-auth": "^4.24.0",
      "@auth/mongodb-adapter": "^2.0.0",
    }),
  },
  devDependencies: {
    typescript: "^5.0.0",
    "@types/node": "^20.0.0",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    eslint: "^8.0.0",
    "eslint-config-next": "^15.0.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    ...(config.addHusky && {
      husky: "^8.0.0",
      "lint-staged": "^15.0.0",
    }),
  },
});

export const nextConfigTemplate =
  () => `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
  typescript: {
    ignoreBuildErrors: false,
  },
  eslint: {
    ignoreDuringBuilds: false,
  },
}

module.exports = nextConfig`;

export const tsConfigTemplate = () => ({
  compilerOptions: {
    target: "es5",
    lib: ["dom", "dom.iterable", "es6"],
    allowJs: true,
    skipLibCheck: true,
    strict: true,
    noEmit: true,
    esModuleInterop: true,
    module: "esnext",
    moduleResolution: "bundler",
    resolveJsonModule: true,
    isolatedModules: true,
    jsx: "preserve",
    incremental: true,
    plugins: [{ name: "next" }],
    baseUrl: ".",
    paths: {
      "@/*": ["./src/*"],
    },
  },
  include: ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  exclude: ["node_modules"],
});

export const tailwindConfigTemplate =
  () => `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
    },
  },
  plugins: [],
}`;

export const postcssConfigTemplate = () => `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}`;

export const appLayoutTemplate = (
  config: ProjectConfig,
) => `import './globals.css'
import { Inter } from 'next/font/google'
${config.addAuth ? `import { AuthProvider } from '@/lib/auth'` : ""}

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: '${config.projectName}',
  description: 'Generated by Comet CLI',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        ${config.addAuth ? "<AuthProvider>" : ""}
        {children}
        ${config.addAuth ? "</AuthProvider>" : ""}
      </body>
    </html>
  )
}`;

export const appPageTemplate = () => `export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 max-w-5xl w-full items-center justify-between font-mono text-sm lg:flex">
        <h1 className="text-4xl font-bold">Welcome to your Next.js app!</h1>
        <p className="mt-4 text-xl">
          Built with TypeScript, Tailwind CSS, and MongoDB
        </p>
      </div>
    </main>
  )
}`;

export const globalsCssTemplate = () => `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}`;

export const envExampleTemplate = (config: ProjectConfig) => `# MongoDB
MONGODB_URI=mongodb://localhost:27017/${config.projectName}

# Next.js
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-secret-key

${
  config.addAuth
    ? `# Google OAuth
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret`
    : ""
}`;

export const gitignoreTemplate =
  () => `# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# IDE
.vscode/
.idea/

# Package managers
pnpm-lock.yaml
bun.lockb`;

export const nvmrcTemplate = () => `20.10.0`;

export const dbLibTemplate = () => `import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI!;

if (!MONGODB_URI) {
  throw new Error('Please define the MONGODB_URI environment variable');
}

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function dbConnect() {
  if (cached.conn) {
    return cached.conn;
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    };

    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      return mongoose;
    });
  }

  try {
    cached.conn = await cached.promise;
  } catch (e) {
    cached.promise = null;
    throw e;
  }

  return cached.conn;
}

export default dbConnect;`;

export const userModelTemplate =
  () => `import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
  name: string;
  email: string;
  image?: string;
  createdAt: Date;
  updatedAt: Date;
}

const UserSchema: Schema = new Schema(
  {
    name: {
      type: String,
      required: [true, 'Please provide a name'],
    },
    email: {
      type: String,
      required: [true, 'Please provide an email'],
      unique: true,
    },
    image: {
      type: String,
    },
  },
  {
    timestamps: true,
  }
);

export default mongoose.models.User || mongoose.model<IUser>('User', UserSchema);`;

export const utilsTemplate = () => `import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}`;

export const typesTemplate = () => `export interface User {
  id: string;
  name: string;
  email: string;
  image?: string;
  createdAt: string;
  updatedAt: string;
}

export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}`;

export const helloRouteTemplate =
  () => `import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/db';

export async function GET(request: NextRequest) {
  try {
    await dbConnect();
    
    return NextResponse.json({
      success: true,
      message: 'Hello from Next.js API!',
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: 'Internal Server Error',
      },
      { status: 500 }
    );
  }
}`;

export const readmeTemplate = (
  config: ProjectConfig,
) => `# ${config.projectName}

This project was generated using [Comet CLI](https://github.com/your-username/comet-generate).

## Tech Stack

- **Framework**: Next.js 15+ with App Router
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **Database**: MongoDB with Mongoose
${config.addAuth ? "- **Authentication**: NextAuth.js with Google OAuth" : ""}
- **Package Manager**: ${config.packageManager}
${config.addHusky ? "- **Git Hooks**: Husky with lint-staged" : ""}

## Getting Started

1. Install dependencies:
\`\`\`bash
${config.packageManager} install
\`\`\`

2. Set up environment variables:
\`\`\`bash
cp .env.local.example .env.local
\`\`\`

3. Update the \`.env.local\` file with your database connection string and other required variables.

4. Run the development server:
\`\`\`bash
${config.packageManager} run dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Project Structure

- \`src/app/\` - Next.js app router pages and API routes
- \`src/components/\` - Reusable React components
- \`src/lib/\` - Utility functions and configurations
- \`src/models/\` - MongoDB/Mongoose models
- \`src/types/\` - TypeScript type definitions

## Learn More

- [Next.js Documentation](https://nextjs.org/docs)
- [MongoDB Documentation](https://docs.mongodb.com/)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
${config.addAuth ? "- [NextAuth.js Documentation](https://next-auth.js.org/)" : ""}
`;
